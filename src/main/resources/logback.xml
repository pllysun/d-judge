<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!--info日志文件-->
    <appender name="INFO_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件相对路径和名称-->
        <file>./apilogs/info/djudge_-${HOSTNAME}.log</file>
        <append>true</append>
        <!--根据日志文件的大小来滚动（即创建新的）日志文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./apilogs/info/archive/djudge_-${HOSTNAME}-%d.%i.log</fileNamePattern>
            <!--只保留最近30天的日志-->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--超过10MB便会滚动日志文件-->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 配置日志的输出格式 -->
        <encoder>
            <pattern>%date %level [%thread] %logger{10} %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--异步处理-->
    <appender name="ASYNC_INFO_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>512</queueSize>
        <appender-ref ref="INFO_FILE" />
    </appender>

    <!--debug日志文件-->
    <appender name="DEBUG_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件相对路径和名称-->
        <file>./apilogs/debug/xxxx_-${HOSTNAME}.log</file>
        <append>true</append>
        <!--根据日志文件的大小来滚动（即创建新的）日志文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./apilogs/debug/archive/xxxx_-${HOSTNAME}-%d.%i.log</fileNamePattern>
            <!--只保留最近30天的日志-->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--超过10MB便会滚动日志文件-->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 配置日志的输出格式 -->
        <encoder>
            <pattern>%date %level [%thread] %logger{10} %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--异步处理-->
    <appender name="ASYNC_DEBUG_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>512</queueSize>
        <appender-ref ref="DEBUG_FILE" />
    </appender>

    <!--控制台输出-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--输出格式-->
            <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--异步处理-->
    <appender name="ASYNC-STDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>512</queueSize>
        <appender-ref ref="STDOUT" />
    </appender>

    <!--在info级别下，将包名所在org.springframework的日志全部打印到控制台-->
    <!--additivity被设置为'false'，这意味着日志事件不会传递给父级记录器-->
    <logger name="org.springframework" level="info" additivity="false">
        <appender-ref ref="ASYNC-STDOUT" />
    </logger>

    <!--在debug级别下，会打印记录sql的相关日志，将包名为org.apache.ibatis下的日志输出到debug日志文件-->
    <logger name="org.apache.ibatis" level="debug" additivity="false">
        <appender-ref ref="ASYNC_DEBUG_FILE" />
    </logger>

    <!--所有业务相关的info日志，打印到控制台，并输出到info日志文件-->
    <root level="info">
        <appender-ref ref="ASYNC-STDOUT" />
        <appender-ref ref="ASYNC_INFO_FILE" />
    </root>
</configuration>

